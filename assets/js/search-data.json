{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://millengustavo.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . MyTest . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://millengustavo.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Digital blindness: Learning to look at the digital conversation between two major bank brands and their audience using Python",
            "content": "New “digital” banks are rising in popularity in Brazil. It is hard to pinpoint the exact reasons for this, we may gain some insight on the subject by investigating data. . In this article we are going to dive deeper on tweets from two Brazilian banks: Itaú and Nubank. We will use Python to help us on this mission. . Cleaning the data . The Jupyter Notebook with the code is available here. . We start our journey with two datasets in JSON format. The data consists of tweets from both banks between 2014 and 2019 (February). . Let’s import one of the datasets and manipulate it with Pandas. . import pandas as pd import numpy as np import matplotlib.pyplot as plt from wordcloud import WordCloud, STOPWORDS df_nubank = pd.read_json(‘nubank_tweets.json’) df_nubank.head() . . We can see that these are tweets from the bank itself, some are replies to other users. We have some interesting columns: ‘created_at’, ‘favorite_count’ and ‘retweet_count’. . Let’s sort the tweets by ‘favorite_count’ and keep tweets created after January 2018. We’ll need to clean the text, but first we duplicate it and save to a new ‘original_tweet’ column to help us later. . df_nubank = df_nubank.sort_values(by=[‘favorite_count’],ascending=False).copy() df_nubank = df_nubank.reset_index(drop=True) df_nubank = df_nubank[df_nubank[‘created_at’] &gt; ‘2018–01–01’] df_nubank[‘original_tweet’] = df_nubank[‘text’] df_nubank.head() . . Every NLP (Natural Language Processing) pipeline starts with cleaning the text. Let’s do it now! . # Lower case df_nubank[‘text’] = df_nubank[‘text’].apply(lambda x: “ “.join(x.lower() for x in x.split())) # Removing usernames df_nubank[‘text’] = df_nubank[‘text’].str.replace(‘@[^ s]+’,””) # Removing urls df_nubank[‘text’] = df_nubank[‘text’].str.replace(‘https?: / /.*[ r n]*’,’’) # Removing punctuation df_nubank[‘text’] = df_nubank[‘text’].str.replace(‘[^ w s]’,’’) # Removing stopwords from nltk.corpus import stopwords stop = stopwords.words(‘portuguese’) df_nubank[‘text’] = df_nubank[‘text’].apply(lambda x: “ “.join(x for x in x.split() if x not in stop)) # Removing common brazilian names -&gt; you will need a .txt with these, it is easy to find it online names = pd.read_csv(‘nomes.txt’, encoding=’latin’, header=None) name_list = (names[0].str.lower()).tolist() df_nubank[‘text’] = df_nubank[‘text’].apply(lambda x: “ “.join(x for x in x.split() if x not in name_list)) # Removing numbers df_nubank[‘text’] = df_nubank[‘text’].str.replace(‘ d+’,’’) # Removing small words -&gt; e.g.: é, tá, lá, pra, etc df_nubank[‘text’] = df_nubank[‘text’].str.replace(r’ b( w{1,3}) b’, ‘’) # Normalizing it df_nubank.text = df_nubank.text.str.normalize(‘NFKD’) .str.encode(‘ascii’, errors=’ignore’) .str.decode(‘utf-8’) # Removing empty rows df_nubank[‘text’].replace(‘’, np.nan, inplace=True) df_nubank.dropna(subset=[‘text’], inplace=True) # Let’s keep only the first 10k tweets from our dataframe df_nubank = df_nubank[:10000] df_nubank.head() . . By now you can see how different our ‘text’ column looks in comparison with the ‘original_tweet’. . Let’s proceed to our first visualization: Word Clouds! We are going to use the wordcloud library. . text = “ “.join(review for review in df_nubank.text) %matplotlib inline stopwords = set(STOPWORDS) wordcloud = WordCloud(width = 3000, height = 2000, background_color = ‘black’, stopwords = stopwords).generate(text) fig = plt.figure(figsize = (40, 30), facecolor = ‘k’, edgecolor = ‘k’) plt.imshow(wordcloud, interpolation = ‘bilinear’) plt.axis(‘off’) plt.tight_layout(pad=0) plt.show() . . Awesome right?! Let’s do the same for Itaú and proceed to the scattertext! . df_itau = pd.read_json(‘itau_tweets.json’) # sorting by fav count df_itau = df_itau.sort_values(by=[‘favorite_count’],ascending=False).copy() df_itau = df_itau.reset_index(drop=True) df_itau = df_itau[df_itau[‘created_at’] &gt; ‘2018–01–01’] df_itau[‘original_tweet’] = df_itau[‘text’] # Data Cleaning # Lower case df_itau[‘text’] = df_itau[‘text’].apply(lambda x: “ “.join(x.lower() for x in x.split())) # Removing usernames df_itau[‘text’] = df_itau[‘text’].str.replace(‘@[^ s]+’,””) # Removing urls df_itau[‘text’] = df_itau[‘text’].str.replace(‘https?: / /.*[ r n]*’,’’) # Removing punctuation df_itau[‘text’] = df_itau[‘text’].str.replace(‘[^ w s]’,’’) # Removing stopwords from nltk.corpus import stopwords stop = stopwords.words(‘portuguese’) df_itau[‘text’] = df_itau[‘text’].apply(lambda x: “ “.join(x for x in x.split() if x not in stop)) # Removing common brazilian names -&gt; you will need a .txt with these, it is easy to find it online names = pd.read_csv(‘nomes.txt’, encoding=’latin’, header=None) name_list = (names[0].str.lower()).tolist() df_itau[‘text’] = df_itau[‘text’].apply(lambda x: “ “.join(x for x in x.split() if x not in name_list)) # Removing numbers df_itau[‘text’] = df_itau[‘text’].str.replace(‘ d+’,’’) # Removing small words -&gt; e.g.: é, tá, lá, pra, etc df_itau[‘text’] = df_itau[‘text’].str.replace(r’ b( w{1,3}) b’, ‘’) # Normalizing it df_itau.text = df_itau.text.str.normalize(‘NFKD’) .str.encode(‘ascii’, errors=’ignore’) .str.decode(‘utf-8’) # Removing empty rows df_itau[‘text’].replace(‘’, np.nan, inplace=True) df_itau.dropna(subset=[‘text’], inplace=True) # Using only the first 10k tweets df_itau = df_itau[:10000] text_itau = “ “.join(review for review in df_itau.text) # Wordcloud stopwords = set(STOPWORDS) wordcloud = WordCloud(width = 3000, height = 2000, background_color = ‘black’, stopwords = stopwords).generate(text_itau) fig = plt.figure(figsize = (40, 30), facecolor = ‘k’, edgecolor = ‘k’) plt.imshow(wordcloud, interpolation = ‘bilinear’) plt.axis(‘off’) plt.tight_layout(pad=0) plt.show() . . Word clouds are not the best way of interpreting the data. Comparing sizes and intensities of colors is not straight forward. . Scattertext . From the github repository: . “A tool for finding distinguishing terms in small-to-medium-sized corpora, and presenting them in a sexy, interactive scatter plot with non-overlapping term labels. Exploratory data analysis just got more fun.” . We will use it to create a scatter plot of the words based on the frequency and without overlapping the labels. . Let’s combine both categories and use the ‘created_at’ and ‘original_tweet’ columns as metadata. . df_nubank[‘bank’] = ‘nubank’ df_nubank[‘metadata’] = df_nubank.created_at.map(str) + “ | “ + df_nubank.original_tweet df_nubank = df_nubank[[‘metadata’, ‘bank’, ‘text’]] df_itau[‘bank’] = ‘itau’ df_itau[‘metadata’] = df_itau.created_at.map(str) + “ | “ + df_itau.original_tweet df_itau = df_itau[[‘metadata’, ‘bank’, ‘text’]] df_scatter = df_nubank.append(df_itau) . Creating the scatter plot . import scattertext as st import spacy nlp = spacy.load(‘pt’) corpus = (st.CorpusFromPandas(df_scatter, category_col=’bank’, text_col=’text’, nlp=nlp) .build() .get_unigram_corpus() .compact(st.ClassPercentageCompactor(term_count=1, term_ranker=st.OncePerDocFrequencyRanker))) html = st.produce_scattertext_explorer(corpus, category=’nubank’, category_name=’Nubank’, not_category_name=’Itaú’, width_in_pixels=1000, metadata=corpus.get_df()[‘metadata’]) open(“visualization_nubank_itau.html”, ‘wb’).write(html.encode(‘utf-8’)) . Exploring the Scattertext html file . The code above generates an .html file. You can access a live version on this link, but I will post some screenshots to illustrate. . . On the top-left corner you can see the words used more by Nubank and less by Itaú. On the bottom-right corner you see the words used more by Itaú and less by Nubank. . Bottom-left corner shows the least frequent terms and top-right corner the most frequent ones. . Searching for specific terms . We can see that ‘ajudar’ (help in Portuguese) is the most characteristic word of this corpus. You can click on the word or type it on the search box and see the frequency it appears in each category. . . The term ‘agência’ (agency in Portuguese) is the top term from Itaú, appearing 586 times. It appears only 4 times in the Nubank category. . Itaú was founded in January 2, 1945, while Nubank was founded in May 6, 2013. It is reasonable that we find contrasts like this. . . The term ‘roxinho’ (a cute way of saying purple in Portuguese) is the top term from Nubank. The bank uses this word as a nickname for their flagship product: their credit card. . . Emoji analysis . Scattertext introducing text says: . “Exploratory data analysis just got more fun.” . Let’s take fun to the next level, we will compare the emoji on the tweets from both banks! Play with the live version on this link. . corpus = st.CorpusFromParsedDocuments(df_scatter, parsed_col=’metadata’, category_col=’bank’, feats_from_spacy_doc=st.FeatsFromSpacyDocOnlyEmoji()).build() html = st.produce_scattertext_explorer(corpus, category=’nubank’, category_name=’Nubank’, not_category_name=’Itaú’, metadata=(corpus.get_df()[‘metadata’]), width_in_pixels=1000) open(“emoji_nubank_itau.html”, ‘wb’).write(html.encode(‘utf-8’)) . . A scatter plot of emoji based on their frequency of use. How awesome is that?! . We see hearts everywhere, but a clear distinction between their color. Keep in mind that we filtered the tweets only for those starting from January 2018, and 2018 was a World Cup year. . . The color of the hearts from Itaú were most from the Brazilian flag and the bank’s main color: orange. The bank is an official sponsor of the Brazilian Soccer Team. . . The hearts from Nubank followed the signature color of the brand: purple. . Wrapping up . Play around with the plots to see how powerful they are. If you liked this article, recommend it and share it with your friends. . Disclaimer . This analysis was done based on public available data from the brand’s social media channels to illustrate the application of an algorithm developed by our engineers. We don’t have any affiliation with those brands. . Citation for the Scattertext library: . Jason S. Kessler. Scattertext: a Browser-Based Tool for Visualizing how Corpora Differ. ACL System Demonstrations. 2017. .",
            "url": "https://millengustavo.github.io/blog/data%20visualization/data%20science/machine%20learning/2019/03/15/digitalblindness.html",
            "relUrl": "/data%20visualization/data%20science/machine%20learning/2019/03/15/digitalblindness.html",
            "date": " • Mar 15, 2019"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://millengustavo.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://millengustavo.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}